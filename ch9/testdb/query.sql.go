// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package testdb

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  product_no, name, price
) VALUES (
  $1, $2, $3
)
RETURNING product_no, name, price
`

type CreateProductParams struct {
	ProductNo int32
	Name      string
	Price     int32
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.ProductNo, arg.Name, arg.Price)
	var i Product
	err := row.Scan(&i.ProductNo, &i.Name, &i.Price)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  user_id, user_name, created_at
) VALUES (
  $1, $2, $3
)
RETURNING user_id, user_name, created_at
`

type CreateUserParams struct {
	UserID    string
	UserName  string
	CreatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.UserID, arg.UserName, arg.CreatedAt)
	var i User
	err := row.Scan(&i.UserID, &i.UserName, &i.CreatedAt)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE product_no = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, productNo int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, productNo)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT product_no, name, price FROM products
WHERE product_no = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, productNo int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, productNo)
	var i Product
	err := row.Scan(&i.ProductNo, &i.Name, &i.Price)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_name, created_at FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(&i.UserID, &i.UserName, &i.CreatedAt)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT product_no, name, price FROM products
ORDER BY name
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(&i.ProductNo, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, user_name, created_at FROM users
ORDER BY user_name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.UserID, &i.UserName, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
set name = $2,
    price = $3
WHERE product_no = $1
`

type UpdateProductParams struct {
	ProductNo int32
	Name      string
	Price     int32
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct, arg.ProductNo, arg.Name, arg.Price)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
set user_name = $2
WHERE user_id = $1
`

type UpdateUserParams struct {
	UserID   string
	UserName string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.UserID, arg.UserName)
	return err
}
